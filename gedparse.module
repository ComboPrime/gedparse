<?php
/**
 * @file
 * Gedparse dynamically generates genealogy web pages from a GEDCOM file.
 */


/**
 * Implements hook_help().
 */
function gedparse_help($path, $arg) {
  switch ($path) {
    case 'admin/help#gedparse':
      $output = file_get_contents(drupal_get_path('module', 'gedparse') . '/README.txt') ;
      return nl2br($output) ;
  }
}


/**
 * Implements hook_menu().
 */
function gedparse_menu() {
  $base_path = variable_get('gedparse_base_path', 'gedparse') ;
  $items = array();

  // Module configuration page
  $items['admin/config/content/gedparse'] = array(
    'title' => 'GEDparse',
    'description' => 'Configure settings for the GEDparse module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gedparse_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Display search results
  $items[$base_path . '/search/%'] = array(
    'title' => 'Search Results',
    'page callback' => '_gedparse_display_results',
    'page arguments' => array(2, 3),
    'access arguments' => array('use gedparse'),
    'type' => MENU_CALLBACK,
  );

  // Display a person or couple page
  $items[$base_path . '/show/%'] = array(
    'page callback' => '_gedparse_display_page',
    'page arguments' => array(2, 3, 4),
    'access arguments' => array('use gedparse'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function gedparse_permission() {
  return array(
    'use gedparse' => array(
      'title' => t('Search and view records from your GEDCOM file'),
      'warning' => t('Warning: Give to trusted roles only due to privacy issues with genealogical data.'),
    ),
  ) ;
}

/**
 * Implements hook_block_info().
 *
 * A reusable block to allow name searches
 */
function gedparse_block_info() {
  $blocks['gedparse_search'] = array(
    'info' => t('GEDparse Search Form'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function gedparse_block_view($delta='') {
  $block = array();

  switch ($delta) {
    case 'gedparse_search':
      $block['subject'] = NULL ;
      $block['content'] = drupal_get_form('gedparse_search_form') ;
      break;
  }

  return $block;
}

/**
 * Callback function to create the search form.
 */
function gedparse_search_form($form, &$form_state) {
  $access_message = t('NOTE: Access to the online family tree is restricted to protect individual privacy.') ;

  if (variable_get('site_mail')) {
    $access_message .= ' ' . t("Please contact <a href=\"mailto:@admin?subject=Family tree access\">@admin</a> if you are a family member.",
      array('@admin' => variable_get('site_mail'))) ;
  }

  $form['find_relative'] = array(
    '#type' => 'fieldset',
    '#title' => t('Find a relative'),
  ) ;

  $form['find_relative']['access_message'] = array(
    '#markup' => $access_message,
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  ) ;

  $form['find_relative']['instructions'] = array(
    '#markup' => t('Leaving one field blank will return all matches on the other field'),
    '#prefix' => '<p><em>',
    '#suffix' => '</em></p>',
  ) ;

  $form['find_relative']['first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('First name'),
    '#maxlength' => 64,
  ) ;

  $form['find_relative']['last_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last name'),
    '#maxlength' => 64,
  ) ;

  $form['find_relative']['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  ) ;

  return $form;
}

/**
 * Handler function to send submitted search terms to the results page.
 */
function gedparse_search_form_submit($form, &$form_state) {
  $search_url = 'family/search/' ;

  // append the search input as arg1 and optional arg2
  if ($form_state['values']['first_name']) {
    $search_url .= $form_state['values']['first_name'] ;

    if ($form_state['values']['last_name']) {
      $search_url .= '/' . $form_state['values']['last_name'] ;
    }
  }

  elseif ($form_state['values']['last_name']) {
    $search_url .= $form_state['values']['last_name'] ;
  }

  else {
    $search_url .= 'all' ;
    // need to implement theme_pager to handle large result sets?
  }

  // send the args to the search results page
  $form_state['redirect'] = check_url($search_url) ;
}

/**
 * Callback function to create the admin config page.
 */
function gedparse_admin() {
  $form = array();

  $form['gedparse_db_location'] = array(
    '#type' => 'textfield',
    '#title' => t('Location of your GEDCOM file'),
    '#size' => 100,
    '#maxlength' => 100,
    '#description' => t('This directory should not be accessible over the web.'),
    '#default_value' => variable_get('gedparse_db_location'),
    '#required' => TRUE,
  );

  $form['gedparse_base_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Base path for displayed GEDparse pages'),
    '#description' => t('Example default path is mysite.com/gedparse/show/%.'),
    '#size' => 100,
    '#maxlength' => 100,
    '#default_value' => variable_get('gedparse_base_path', 'gedparse'),
  );

  $form['gedparse_headshot_location'] = array(
    '#type' => 'textfield',
    '#title' => t('Location of your optional folder of headshots'),
    '#size' => 100,
    '#maxlength' => 100,
    '#description' => t('This directory must be accessible over the web.'),
    '#default_value' => variable_get('gedparse_headshot_location'),
  );

  $form['gedparse_use_bootstrap'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Bootstrap stylesheet?'),
    '#description' => t('Check to load some Bootstrap 2.3.2 responsive grid CSS.'),
    '#default_value' => variable_get('gedparse_use_bootstrap'),
  ) ;

  return system_settings_form($form);
}

/**
 * Callback function to display search results
 */
function _gedparse_display_results($field1, $field2 = NULL) {
  // set the search pattern from the args
  $pattern = '~^\d (NAME|NICK) .*(' ;

  if ($field1 != 'all') {
    $pattern .= $field1 ;
  }

  if ($field2) {
    $pattern .= '.*' . $field2 ;
  }

  $pattern .= ').*$~im' ;

  //initialize an array to hold results
  $name_matches = array() ;

  $all_records = _gedparse_get_all_records() ;

  foreach ($all_records as $record) {
    preg_match($pattern, $record, $matches) ;

    if ($matches) {
      preg_match('~^@I(\d+)@ INDI~im', $record, $indi) ;
      $name_matches[] = $indi[1] ;
    }
  }

  if (count($name_matches) > 1) {
    foreach ($name_matches as &$person) {
      $person = gedparse_person_link($person) ;
    }

    // sort by name
    usort($name_matches, function($a, $b) {
      return strcmp($a['title'], $b['title']) ;
    }) ;

    // implement a pager in case the result set is huge
    $limit = 20 ;
    $page = pager_default_initialize(count($name_matches), $limit, 0) ;
    $offset = $limit * $page ;
    $output = array(
      array(
        '#theme' => 'links',
        '#links' => array_slice($name_matches, $offset, $limit),
      ),
      array(
        '#theme' => 'pager',
      ),
    );
  }

  elseif (count($name_matches) == 1) {
    drupal_goto('family/show/' . urlencode($name_matches[0])) ;
  }

  else {
    $output['html'] = array(
      '#markup' => t('No names in the database matched your search. Would you like to try another search?'),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    ) ;

    // grab the search form block
    $block = module_invoke('gedparse', 'block_view', 'gedparse_search') ;

    $output['form'] = $block['content'] ;
  }

  return drupal_render($output) ;
}

/**
 * Callback function to display the person or couple page
 */
function _gedparse_display_page($selected_number, $partner_number = NULL, $family_number = NULL) {
  $selected_variables = _gedparse_display_person($selected_number) ;
  $title = $selected_variables['full_name'] ;
  $partner_variables = array() ;

  // if a partner id number was passed to the function,
  // or if the selected person has exactly 1 partner,
  // go ahead and display that person alongside.
  if (!$partner_number && $selected_variables['display_partner']) {
    $partner_number = $selected_variables['display_partner'] ;
  }

  $output_array = array(
    'selected_html' => $selected_variables['html'],
    'selected_gender_class' => $selected_variables['gender_class'],
  ) ;

  if ($partner_number) {
    $partner_variables = _gedparse_display_person($partner_number, FALSE) ;
    $title .= ' & ' . $partner_variables['full_name'] ;

    $output_array['partner_html'] = $partner_variables['html'] ;
    $output_array['partner_gender_class'] = $partner_variables['gender_class'] ;

    if (!$family_number && $selected_variables['family_id']) {
      $family_number = $selected_variables['family_id'] ;
    }

    $family_info = _gedparse_display_family($family_number) ;
    $output_array = array_merge($output_array, $family_info) ;
  }

  drupal_set_title($title) ;

  return theme('gedparse_display', $output_array) ;
}


/**
 * Callback function to display a person.
 */
function _gedparse_display_person($indi_number, $selected = TRUE) {
  // set up array for later output
  $gedparse_event_list = array(
    'BIRT' => 'Born',
    'CHR'  => 'Christened',
    'DEAT' => 'Died',
    'BURI' => 'Buried',
    'CREM' => 'Cremated',
    'ADOP' => 'Adopted',
    'BAPM' => 'Baptized',
    'BARM' => 'Bar Mitzvah',
    'BASM' => 'Bas Mitzvah',
    'BLES' => 'Blessing given',
    'CHRA' => 'Christened as adult',
    'CONF' => 'Confirmed',
    'FCOM' => 'First Communion',
    'ORDN' => 'Ordained',
    'NATU' => 'Naturalized',
    'EMIG' => 'Emigrated',
    'IMMI' => 'Immigrated',
    'CENS' => 'Census record',
    'PROB' => 'Probate',
    'WILL' => 'Will',
    'GRAD' => 'Graduated',
    'RETI' => 'Retired',
    'EVEN' => '',
    'CAST' => 'Caste',
    'DSCR' => 'Description',
    'EDUC' => 'Scholastic achievment',
    'IDNO' => 'National ID #',
    'NATI' => 'Nationality',
    'NCHI' => 'No. of children',
    'NMR'  => 'No. of marriages',
    'OCCU' => 'Occupation',
    'PROP' => 'Possessions',
    'RELI' => 'Religion',
    'RESI' => 'Residence',
    'SSN'  => 'SSN#',
    'TITL' => 'Title'
  );

  // get the raw data
  $flat_record = _gedparse_get_record('INDI', $indi_number) ;

  // Explode flat_record to get array of separate items
  $items = explode("\n1 ", $flat_record) ;

  // set a CSS class based on gender
  $gender_class = '' ;

  // Records are not restricted by default
  $restricted = FALSE ;

  // Display a partner?
  $display_partner_id = NULL ;

  // If displaying a partner, need the family id number to grab family info
  $family_id = NULL ;

  // Render arrays
  $parents = array() ;
  $names = array() ;
  $events = array() ;
  $notes = array() ;
  $links = array() ;
  $partners = array() ;
  $siblings = array() ;

  // iterate through all the record items, sorting into the arrays and
  // theming if necessary
  foreach ($items as $item) {
    if (strpos($item, '@') === 0) {
      // only here so we can use 'else' at end as a catch-all bucket
    }

    elseif (strpos($item, 'RESN') === 0) {
      $restricted = TRUE ;
    }

    elseif (strpos($item, 'FAMC') === 0) {
      preg_match('@F(\d+)@i', $item, $matches);

      $parent_id_numbers = _gedparse_get_family_members($matches[1], 'parents') ;

      foreach ($parent_id_numbers as $id_number) {
        $parent = gedparse_person_link($id_number) ;

        $parents[] = $parent ;
      }

      $sibling_id_numbers = _gedparse_get_family_members($matches[1], 'siblings', $indi_number) ;

      foreach ($sibling_id_numbers as $id_number) {
        $sibling = gedparse_person_link($id_number) ;

        $siblings[] = $sibling ;
      }
    }

    elseif (strpos($item, 'FAMS') === 0) {
      preg_match('@F(\d+)@i', $item, $matches);

      // Save the family number in case we need it later.
      // Ok if this gets overwritten, because that means
      // there's more than one family, so we don't automatically
      // display a family anyway.
      $family_id = $matches[1] ;

      $partner_id_number = _gedparse_get_family_members($family_id, 'partners', $indi_number) ;

      // also save the partner number.
      $display_partner_id = $partner_id_number[0] ;

      $partner = gedparse_person_link($partner_id_number[0]) ;

      if ($selected) {
        $partner['href'] = preg_replace('~(\d+)$~', $indi_number . '/$1', $partner['href']) ;
      }

      else {
        $partner['href'] .= '/' . $indi_number ;
      }

      // append the family number so we can grab its info later
      $partner['href'] .= '/' . $family_id ;

      $partners[] = $partner ;
    }

    elseif (strpos($item, 'SSN') === 0) {
      $events[] = array(
        '#theme' => 'gedparse_event',
        '#label' => 'SSN#',
        '#info' => substr($item, 3),
      ) ;
    }

    elseif (strpos($item, 'SEX') === 0) {
      // get M/m or F/f from the file, convert to lowercase,
      // and use that as the array key to get a class name.
      $gender_class = 'gender-' . strtolower(substr($item, 3)) ;
      // another nasty space added, so kill it
      $gender_class = str_replace(' ', '', $gender_class) ;
    }

    elseif (strpos($item, 'NAME') === 0) {
      $name = array(
        '#theme' => 'gedparse_name',
        '#html_open' => NULL,
        '#html_close' => NULL,
        '#npfx' => NULL,
        '#full_name' => NULL,
        '#nsfx' => NULL,
        '#nick' => NULL,
        '#notes' => array(
          '#theme' => 'item_list',
          '#type' => 'ul',
          '#items' => NULL,
        ),
      ) ;

      $name_parts = explode("\n2 ", $item) ;

      foreach ($name_parts as $part) {
        if (strpos($part, 'NPFX') === 0) {
          $name['#npfx'] = substr($part, 4) ;
        }

        elseif (strpos($part, 'NAME') === 0) {
          $name['#full_name'] = substr($part, 4) ;
        }

        elseif (strpos($part, 'NSFX') === 0) {
          $name['#nsfx'] = substr($part, 4) ;
        }

        elseif (strpos($part, 'NICK') === 0) {
          $name['#nick'] = substr($part, 4) ;
        }

        elseif (strpos($part, 'NOTE') === 0) {
          $name['#notes']['#items'][] = _gedparse_concatenate(substr($part, 4)) ;
        }
      }

      $names[] = $name ;
    }

    elseif (strpos($item, 'NOTE') === 0) {
      $notes[] = _gedparse_concatenate(substr($item, 4)) ;
    }

    elseif (strpos($item, 'OBJE') === 0) {
      $obje = array(
        'href' => NULL,
        'title' => NULL,
      ) ;

      $item_parts = explode("\n2 ", $item) ;

      foreach ($item_parts as $part) {
        if (strpos($part, 'FILE') === 0) {
          $obje['href'] = substr($part, 4) ;
        }

        elseif (strpos($part, 'TITL') === 0) {
          $obje['title'] = substr($part, 4) ;
        }
      }

      $links[] = $obje ;
    }

    else {
      $event = array(
        '#theme' => 'gedparse_event',
        '#type' => NULL,
        '#date' => NULL,
        '#plac' => NULL,
        '#notes' => NULL,
        '#caus' => NULL,
        '#info' => NULL,
        '#notes' => array(
          '#theme' => 'item_list',
          '#type' => 'ul',
          '#items' => NULL,
        ),
      ) ;

    $item_parts = explode("\n2 ", $item) ;

    $event['#label'] = $gedparse_event_list[array_shift($item_parts)] ;

      foreach ($item_parts as $part) {
        if (strpos($part, 'TYPE') === 0) {
          if ($event['#label'] == 'Occupation') {
            $event['#info'] = substr($part, 4) ;
          }

          else {
            $event['#type'] = substr($part, 4) ;
          }
        }

        elseif (strpos($part, 'DATE') === 0) {
          $event['#date'] = substr($part, 4) ;
        }

        elseif (strpos($part, 'PLAC') === 0) {
          $event['#plac'] = substr($part, 4) ;
        }

        elseif (strpos($part, 'CAUS') === 0) {
          $event['#caus'] = substr($part, 4) ;
        }

        elseif (strpos($part, 'NOTE') === 0) {
          $event['#notes']['#items'][] = _gedparse_concatenate(substr($part, 4)) ;
        }
      }

      $events[] = $event ;
    }
  }

  // grab the first name in the list to use for the title
  $full_name = _gedparse_build_name($names[0], FALSE) ;

  // need  to set the first name item to be a header
  $names[0]['#html_open'] = '<h2 class="main-name">' ;
  $names[0]['#html_close'] = '</h2>' ;

  // start collecting the renderable arrays
  $output =  array() ;

  if ($parents) {
    $output['parents'] = array(
      '#theme' => 'links',
      '#heading' => t('Parents'),
      '#links' => $parents,
      '#prefix' => '<div class="parents">',
      '#suffix' => '</div>',
    ) ;
  }

  else {
    $output['parents'] = array(
      '#markup' => t('Not in database'),
      '#prefix' => '<div class="parents"><h2>' . t('Parents') . '</h2><p>',
      '#suffix' => '</p></div>',
    ) ;
  }

  // only display the headshot image if (1) folder location is set, and
  // (2) a headshot file for this person exists in that folder
  if (variable_get('gedparse_headshot_location')) {
    $headshot_path = conf_path() . '/' . variable_get('gedparse_headshot_location') ;
    $headshot_path .= '/indi' . $indi_number . '.jpg' ;

    if (file_exists($headshot_path)) {
      $output['headshot'] = array(
          '#theme' => 'image',
          '#path' => $headshot_path,
          '#width' => '75px',
          '#height' => '100px',
          '#alt' => 'Portrait of ' . $full_name ,
      ) ;
    }
  }

  $output['names'] = $names ;

  $output['events'] = $events ;

  if ($notes) {
    $output['notes'] = array(
      '#theme' => 'item_list',
      '#title' => t('Notes'),
      '#type' => 'ul',
      '#items' => $notes,
    ) ;
  }

  if ($links) {
    $output['links'] = array(
      '#theme' => 'links',
      '#heading' => t('Related Links'),
      // should be h3, not h2
      '#links' => $links,
    ) ;
  }

  // only show partners list if more than one
  if ($partners) {
    $output['partners'] = array(
      '#theme' => 'links',
      '#heading' => t('Partners'),
      '#links' => $partners,
    ) ;
  }

  else {
    $output['partners'] = array(
      '#markup' => t('None'),
      '#prefix' => '<h2>' . t('Partners') . '</h2><p>',
      '#suffix' => '</p>',
    ) ;
  }

  if ($siblings) {
    $output['siblings'] = array(
      '#theme' => 'links',
      '#heading' => t('Siblings'),
      '#links' => $siblings,
    ) ;
  }

  else {
    $output['siblings'] = array(
      '#markup' => t('None'),
      '#prefix' => '<h2>' . t('Siblings') . '</h2><p>',
      '#suffix' => '</p>',
    ) ;
  }


  // if the selected person has exactly 1 partner,
  // go ahead and display that person alongside.
  if (!$selected || count($partners) != 1) {
    $display_partner_id = NULL ;
  }

  return array(
    'html' => drupal_render($output),
    'full_name' => $full_name,
    'display_partner' => $display_partner_id,
    'family_id' => $family_id,
    'gender_class' => $gender_class,
  ) ;
}

/**
 * Callback function to display a family.
 */
function _gedparse_display_family($family_number) {
  // set up array for later output
  $gedparse_family_events = array(
    'ANUL' => 'Annulled',
    'CENS' => 'Census information',
    'DIV ' => 'Divorced',
    'DIVF' => 'Divorce filed',
    'ENGA' => 'Engaged',
    'MARR' => 'Married',
    'MARB' => 'Banns posted',
    'MARC' => 'Marriage contract',
    'MARL' => 'Marriage license',
    'MARS' => 'Marriage settlement',
    'EVEN' => '',
  );

  // get the raw data
  $flat_record = _gedparse_get_record('FAM', $family_number) ;

  // Explode flat_record to get array of separate items
  $items = explode("\n1 ", $flat_record) ;

  // remove the opening family id line since we don't need it
  array_shift($items) ;

  // Render arrays
  $children = array() ;
  $notes = array() ;
  $links = array() ;

  // iterate through all the record items, sorting into the arrays and
  // theming if necessary
  foreach ($items as $item) {
    if ( strpos($item, 'HUSB') === 0 || strpos($item, 'WIFE') === 0) {
      // only here so we can use 'else' at end as a catch-all bucket
    }

    elseif (strpos($item, 'CHIL') === 0) {
      preg_match('@I(\d+)@i', $item, $matches);
      $child = gedparse_person_link($matches[1]) ;
      $children[] = $child ;
    }

    elseif (strpos($item, 'NOTE') === 0) {
      $notes[] = _gedparse_concatenate(substr($item, 4)) ;
    }

    elseif (strpos($item, 'OBJE') === 0) {
      $obje = array(
        'href' => NULL,
        'title' => NULL,
      ) ;

      $item_parts = explode("\n2 ", $item) ;

      foreach ($item_parts as $part) {
        if (strpos($part, 'FILE') === 0) {
          $obje['href'] = substr($part, 4) ;
        }

        elseif (strpos($part, 'TITL') === 0) {
          $obje['title'] = substr($part, 4) ;
        }
      }

      $links[] = $obje ;
    }

    else {
      $event = array(
        '#theme' => 'gedparse_event',
        '#type' => NULL,
        '#date' => NULL,
        '#plac' => NULL,
        '#notes' => NULL,
        '#caus' => NULL,
        '#info' => NULL,
        '#notes' => array(
          '#theme' => 'item_list',
          '#type' => 'ul',
          '#items' => NULL,
        ),
      ) ;

    $item_parts = explode("\n2 ", $item) ;

    $event['#label'] = $gedparse_family_events[array_shift($item_parts)] ;

      foreach ($item_parts as $part) {
        if (strpos($part, 'TYPE') === 0) {
          $event['#type'] = substr($part, 4) ;
        }

        elseif (strpos($part, 'DATE') === 0) {
          $event['#date'] = substr($part, 4) ;
        }

        elseif (strpos($part, 'PLAC') === 0) {
          $event['#plac'] = substr($part, 4) ;
        }

        elseif (strpos($part, 'CAUS') === 0) {
          $event['#caus'] = substr($part, 4) ;
        }

        elseif (strpos($part, 'NOTE') === 0) {
          $event['#notes']['#items'][] = _gedparse_concatenate(substr($part, 4)) ;
        }
      }

      $events[] = $event ;
    }
  }

  // start collecting the renderable arrays
  $family_html =  array() ;

  if ($events) {
    $family_html['events'] = $events ;
  }

  if ($notes) {
    $family_html['notes'] = array(
      '#theme' => 'item_list',
      '#title' => t('Notes'),
      '#type' => 'ul',
      '#items' => $notes,
    ) ;
  }

  if ($links) {
    $family_html['links'] = array(
      '#theme' => 'links',
      '#heading' => t('Related Links'),
      // should be h3, not h2
      '#links' => $links,
    ) ;
  }

  // break children out separately, since will be a different
  // variable in the template
  $children_list = array() ;

  if ($children) {
    $children_list = array(
      '#theme' => 'links',
      '#heading' => t('Children'),
      '#links' => $children,
    ) ;
  }

  return array(
    'family_html' => drupal_render($family_html),
    'children_list' => drupal_render($children_list),
  ) ;
}

/**
 * Validate the user-entered Gedparse settings.
 */
function _gedparse_admin_validate($form, &$form_state) {
  $gedparse_db_location = $form_state['values']['gedparse_db_location'];
  if (!file_exists($gedparse_db_location)) {
    form_set_error('gedparse_db_location', t("Can't find a file at that location."));
  }

  $gedparse_headshot_location = $form_state['values']['gedparse_headshot_location'];
  if ($gedparse_headshot_location && !file_exists($gedparse_headshot_location)) {
    form_set_error('gedparse_headshot_location', t("Can't find a folder at that location."));
  }
}


/**
 * Theming functions
 *
 */

/**
 * Implements hook_theme().
 */
function gedparse_theme() {
  return array(
    'gedparse_display' => array(
      'variables' => array(
        'selected_html' => NULL,
        'selected_gender_class' => NULL,
        'partner_html' => NULL,
        'partner_gender_class' => NULL,
        'family_html' => NULL,
        'children_list' => NULL,
      ),
      'template' => 'gedparse_display',
    ),

    'gedparse_event' => array(
      'variables' => array(
        'label' => NULL,
        'type' => NULL,
        'date' => NULL,
        'plac' => NULL,
        'info' => NULL,
        'notes' => NULL,
        'caus' => NULL,
      ),
    ),

    'gedparse_name' => array(
      'variables' => array(
        'html_open' => '<p><em>(',
        'html_close' => ')</em></p>',
        'npfx' => NULL,
        'full_name' => NULL,
        'nsfx' => NULL,
        'nick' => NULL,
        'notes' => NULL,
      ),
    ),
  );
}

/**
 * Add custom CSS.
 */
function gedparse_preprocess_gedparse_display(&$vars) {
  drupal_add_css(drupal_get_path('module', 'gedparse') . '/gedparse.css');

  // only load if admin has configured
  if (variable_get('gedparse_use_bootstrap')) {
    drupal_add_css(drupal_get_path('module', 'gedparse') . '/bootstrap-fluid-2-3-2.css');
  }
}


/**
 * Custom theme function for page display.
 */
function theme_gedparse_display($variables) {
  return $variables ;
}

/**
 * Custom theme function for event items.
 */
function theme_gedparse_event($variables) {
  $output = "\n\n" . '<p class="event"><em>' ;

  if ($variables['label'] && $variables['type']) {
    $output .= $variables['label'] . '</em> ' . $variables['type'] . "<br>\n";
  }

  elseif ($variables['label']) {
    $output .= $variables['label'] . '</em> ';
  }

  elseif ($variables['type']) {
    $output .= $variables['type'] . '</em> ';
  }

  if ($variables['info']) {
    if (strpos($variables['info'], 'Y') === 0) {
      $output .= 'Yes';
    }

    else {
      $output .=  $variables['info'] ;
    }
  }

  if ( $variables['info'] && ($variables['plac'] || $variables['date']) ) {
    $output .= ', ' ;
  }

  if ($variables['date']) {
    $output .= $variables['date'] ;
  }

  if ($variables['date'] && $variables['plac']) {
    $output .= '; ' ;
  }

  if ($variables['plac']) {
    $output .= $variables['plac'] ;
  }

  if ($variables['caus']) {
    $output .= "<br>\n<em>Cause:</em>" . $variables['caus'] ;
  }

  $output .= '</p>' ;

  // Also get Drupal to render HTML for a list of notes
  $output .= drupal_render($variables['notes']) ;

  return $output ;
}


/**
 * Custom theme function for names.
 */
function theme_gedparse_name($variables) {
  $output = "\n\n" . $variables['html_open'] ;
  $output .= _gedparse_build_name($variables) ;
  $output .= $variables['nick'] ? ', “' . $variables['nick'] . '”' : '' ;
  $output .= $variables['html_close'] ;

  // clean up extra spaces
  $output = str_replace('“ ', '“', $output) ;
  $output = str_replace('( ', '(', $output) ;

  // Also get Drupal to render HTML for a list of notes
  $output .= drupal_render($variables['notes']) ;

  return $output ;
}

/**
 * Custom theme function for a person's name that links to their record.
 */
function gedparse_person_link($id_number) {
  $record = _gedparse_get_record('INDI', $id_number) ;

  $person_link = array(
    'href' => variable_get('gedparse_base_path', 'gedparse') . '/show/' . $id_number ,
  ) ;

  // check if the person's record is restricted
  $privacy = strpos($record, 'RESN privacy') ;
  if ($privacy !== FALSE) {
    $person_link['title'] = 'Name withheld' ;
  }

  else {
    preg_match('~1 NAME (.+?)$~m', $record, $matches) ;
    $name['full_name'] = $matches ? $matches[1] : 'Name unknown' ;

    preg_match('~NPFX (.+?)$~m', $record, $matches) ;
    $name['npfx'] = $matches ? $matches[1] : '' ;

    preg_match('~NSFX (.+?)$~m', $record, $matches) ;
    $name['nsfx'] = $matches ? $matches[1] : '' ;

    preg_match('~^1 BIRT[^\n1]*\n2 DATE .*?(\d{4})~ms', $record, $matches) ;
    $birth = $matches ? $matches[1] : ' ' ;

    preg_match('~^1 DEAT[^\n1]*\n2 DATE .*?(\d{4})~ms', $record, $matches) ;
    $death = $matches ? $matches[1] : ' ' ;

    $person_link['title'] = _gedparse_build_name($name) ;
    $person_link['title'] .= ' (' . $birth . '–' . $death . ')' ;
  }

  return $person_link ;
}

/**
 * Get an exploded array of records from the flat GEDCOM file.
 *
 * Use Drupal's Cache API to improve performance.
 */
function _gedparse_get_all_records() {
  // First check if the exploded array is already cached.
  // If not, create and cache it.
  if (!$all_records = cache_get('Gedparse:all_records', 'cache')) {
    // The user should have set this location in /admin/config/Gedparse
    $file = variable_get('gedparse_db_location') ;

    // Display a custom error message and redirect to home page
    // if the GEDCOM file can't be found.
    try {
      $fh = fopen($file, 'r') ;

      if ($fh === FALSE) {
        throw new Exception('Cannot open GEDCOM file') ;
      }
    }

    catch (Exception $e) {
      drupal_set_message(t('Cannot open GEDCOM file! Please check GEDparse configuration.'), 'warning') ;
      drupal_goto() ;
    }

    // Read the entire file
    $gedcom = fread($fh, filesize($file));
    fclose($fh);

    // Then split the file into an array of records
    $all_records = explode("\n0 ", $gedcom);

    // Cache the array
    cache_set('Gedparse:all_records', $all_records, 'cache', CACHE_TEMPORARY) ;

    // And return it
    return $all_records ;
  }

  // If it IS in the cache, get it
  else {
    $all_records = cache_get('Gedparse:all_records', 'cache') ;

    // need to check if expired? See comment-48288 on cache_get API page
    // And return the data value of the cached item
    return $all_records->data ;
  }
}

/**
 * Retrieve an INDI or FAM record from exploded array of the flat GEDCOM file.
 */
function _gedparse_get_record($type, $record_number) {
  $all_records = _gedparse_get_all_records() ;

  $matches = preg_grep('/^@[IF]' . $record_number . '@ ' . $type . '/', $all_records) ;

  // by default, preg_grep retains the input array's keys, so need to reset keys.
  $matches = array_values($matches) ;

  return $matches[0] ;
}


/**
 * Retrieve the INDI numbers of all members for a given family
 *
 * Takes a family id number as 1st argument
 * Takes a relationship (parent, spouse, sibling) as 2nd argument
 * Takes the selected person's id number as an optional 3rd arg
 *
 * Returns an array of the partners' id numbers
 */
function _gedparse_get_family_members($family_number, $relationship, $selected_person = NULL) {
  // init an array to hold the spouse id numbers
  $family_members = array() ;

  $family_record = _gedparse_get_record('FAM', $family_number) ;
  $family_parts = explode("\n1 ", $family_record) ;

  foreach ($family_parts as $person) {
    if ($relationship == 'parents' || $relationship == 'partners') {
      preg_match("~[HUSB|WIFE] @I(\d+)@~", $person, $matches) ;
    }

    // if not parents or partners, must be siblings
    else {
      preg_match("~[CHIL] @I(\d+)@~", $person, $matches) ;
    }

    // if we found family members...
    if ($matches) {
      // only add them to array if either: (1) we didn't pass an id number
      // [which means we're looking for parents, so want both]
      // or (2) the id number arg isn't the same as the family member
      // [because we we're looking for partners or siblings]
      if (!$selected_person || $selected_person != $matches[1]) {
        $family_members[] = $matches[1] ;
      }
    }
  }

  return $family_members ;
}

/**
 * Combine all the parts of the name array and removes any slashes
 */
function _gedparse_build_name($name, $themed=TRUE) {
  // need to check if restricted?

  // unthemed names use a hashmark in the array keys;
  // themed names don't. So use $themed arg to distinguish.
  if ($themed) {
    $output = $name['npfx'] ? $name['npfx'] . ' ' : '' ;
    $output .= $name['full_name'] ?: 'Name unknown' ;
    $output .= $name['nsfx'] ? ' ' . $name['nsfx'] : '' ;
  }

  else {
    $output = $name['#npfx'] ? $name['#npfx'] . ' ' : '' ;
    $output .= $name['#full_name'] ?: 'Name unknown' ;
    $output .= $name['#nsfx'] ? ' ' . $name['#nsfx'] : '' ;
  }

  $output = str_replace('/', '', $output) ;

  return $output ;
}

/**
 * Removes CONC/CONT tags and connects lines
 */
function _gedparse_concatenate($text) {
  $text = preg_replace("/\n\d+? CONC/", " ", $text) ;
  $text = preg_replace("/\n\d+? CONT/", "<br>", $text) ;

  return $text;
}
